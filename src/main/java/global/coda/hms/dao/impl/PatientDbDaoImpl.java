package global.coda.hms.dao.impl;


import global.coda.hms.config.MysqlConnection;
import global.coda.hms.constant.applicationconstant.daoconstants.PatientDaoConstants;
import global.coda.hms.constant.dbconstant.MysqlQueries;
import global.coda.hms.dao.PatientDbDao;
import global.coda.hms.model.Patient;
import org.apache.log4j.Logger;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.ResourceBundle;

/**
 * The type Patient db dao.
 */
public class PatientDbDaoImpl implements PatientDbDao {

    private Logger LOGGER = Logger.getLogger(PatientDbDaoImpl.class);

    private static final ResourceBundle LOCAL_MESSAGES_BUNDLE = ResourceBundle.getBundle("messages",
            Locale.getDefault());
    /**
     * Instantiates a new Patient db dao.
     *
     * @throws SQLException the sql exception
     */


    /**
     * @param patient the patient
     * @return
     * @throws SQLException
     */
    @Override
    public Boolean create(Patient patient) throws SQLException {
        LOGGER.info(LOCAL_MESSAGES_BUNDLE.getString(PatientDaoConstants.ENTERED_PATIENT_CREATE) + " " + patient);

        MysqlConnection connection = new MysqlConnection();
        Connection sqlConnection = connection.getConnection();
        //t_user table contents
        String username = patient.getUsername();
        String email = patient.getEmail();
        String password = patient.getPassword();
        //t_patient Contents
        int age = patient.getAge();
        String area = patient.getArea();
        String city = patient.getCity();
        String state = patient.getState();
        String userQuery = LOCAL_MESSAGES_BUNDLE.getString(MysqlQueries.CREATE_PATIENT_T_USER);
        String patientQuery = LOCAL_MESSAGES_BUNDLE.getString(MysqlQueries.CREATE_PATIENT_T_PATIENT);

        PreparedStatement statement = sqlConnection.prepareStatement(userQuery, Statement.RETURN_GENERATED_KEYS);
        statement.setString(1, username);
        statement.setString(2, email);
        statement.setString(3, password);
        statement.setInt(4, 1);

        int numberOfRowsAffected = statement.executeUpdate();
        //get the Autogenerated Key
        ResultSet privateKeys = statement.getGeneratedKeys();
        if (privateKeys.next()) {
            patient.setUserId(privateKeys.getInt(1));
        }


        int userId = patient.getUserId();
        System.out.println(userId);


        statement = sqlConnection.prepareStatement(patientQuery);
        statement.setInt(1, age);
        statement.setString(2, area);
        statement.setString(3, city);
        statement.setString(4, state);
        statement.setInt(5, userId);
        int numberOfRowsAffected1 = statement.executeUpdate();
        connection.closeConnection();
        Boolean bool = false;
        if (numberOfRowsAffected == numberOfRowsAffected1) {
            bool = true;

        } else {
            sqlConnection.rollback();
        }
        LOGGER.info(LOCAL_MESSAGES_BUNDLE.getString(PatientDaoConstants.PATIENT_CREATED_IN_DB));

        return bool;

    }

    /**
     * @param userId
     * @return
     * @throws SQLException
     */
    @Override
    public Patient read(int userId) throws SQLException {
        LOGGER.info(LOCAL_MESSAGES_BUNDLE.getString(PatientDaoConstants.ENTERED_PATIENT_READ) + " " + userId);

        MysqlConnection connection = new MysqlConnection();

        Connection sqlConnection = connection.getConnection();
        Patient patient = new Patient();
        PreparedStatement statement = sqlConnection.prepareStatement("select pk_user_id,username,email,password,fk_role_id,age,area,city,state from t_user join t_patient on t_user.pk_user_id = t_patient.fk_user_id where  t_user.pk_user_id=? and   t_user.is_active =? and t_patient.is_active=?");
        statement.setInt(1, userId);
        statement.setInt(2, 1);
        statement.setInt(3, 1);


        ResultSet resultSet = statement.executeQuery();
        if (!resultSet.isBeforeFirst()) {
            throw new SQLException("UserId Not Found In Db");
        } else {
            while (resultSet.next()) {
                patient.setUserId(resultSet.getInt(1));
                patient.setUsername(resultSet.getString(2));
                patient.setEmail(resultSet.getString(3));
                patient.setPassword(resultSet.getString(4));
                patient.setRoleId(resultSet.getInt(5));
                patient.setAge(resultSet.getInt(6));
                patient.setArea(resultSet.getString(7));
                patient.setCity(resultSet.getString(8));
                patient.setState(resultSet.getString(9));
            }
        }
        connection.closeConnection();
        LOGGER.info(LOCAL_MESSAGES_BUNDLE.getString(PatientDaoConstants.PATIENT_READ_IN_DB) + " " + patient);

        return patient;

    }

    /**
     * @return
     * @throws SQLException
     */
    @Override
    public List<Patient> readAll() throws SQLException {
        MysqlConnection connection = new MysqlConnection();

        Connection sqlConnection = connection.getConnection();
        List<Patient> patientList = new ArrayList<>();
        PreparedStatement statement = sqlConnection.prepareStatement("select pk_user_id,username,email,password,fk_role_id,age,area,city,state from t_user join t_patient on t_user.pk_user_id = t_patient.fk_user_id where t_user.is_active =? and t_patient.is_active=?");
        statement.setInt(1, 1);
        statement.setInt(2, 1);


        ResultSet resultSet = statement.executeQuery();
        while (resultSet.next()) {
            Patient patient = new Patient();
            patient.setUserId(resultSet.getInt(1));
            patient.setUsername(resultSet.getString(2));
            patient.setEmail(resultSet.getString(3));
            patient.setPassword(resultSet.getString(4));
            patient.setRoleId(resultSet.getInt(5));
            patient.setAge(resultSet.getInt(6));
            patient.setArea(resultSet.getString(7));
            patient.setCity(resultSet.getString(8));
            patient.setState(resultSet.getString(9));
            patientList.add(patient);
        }

        connection.closeConnection();
        return patientList;
    }

    /**
     * @return
     * @throws SQLException
     */
    @Override
    public List<Patient> readAllWithMaskedDetails() throws SQLException {
        MysqlConnection connection = new MysqlConnection();

        Connection sqlConnection = connection.getConnection();
        List<Patient> patientList = new ArrayList<>();
        PreparedStatement statement = sqlConnection.prepareStatement("select username,email,age from t_user join t_patient on t_user.pk_user_id = t_patient.fk_user_id where t_user.is_active =? and t_patient.is_active=?");
        statement.setInt(1, 1);
        statement.setInt(2, 1);


        ResultSet resultSet = statement.executeQuery();
        while (resultSet.next()) {
            Patient patient = new Patient();
            patient.setUsername(resultSet.getString(1));
            patient.setEmail(resultSet.getString(2));
            patient.setAge(resultSet.getInt(3));

            patientList.add(patient);
        }

        connection.closeConnection();
        return patientList;
    }

    /**
     * @param patient the patient
     * @return
     * @throws SQLException
     */
    @Override
    public Boolean update(Patient patient) throws SQLException {
        LOGGER.info(LOCAL_MESSAGES_BUNDLE.getString(PatientDaoConstants.ENTERED_PATIENT_UPDATE) + " " + patient);

        MysqlConnection connection = new MysqlConnection();

        Connection sqlConnection = connection.getConnection();
        //t_user table contents
        String username = patient.getUsername();
        String email = patient.getEmail();
        String password = patient.getPassword();
        int userId = patient.getUserId();
        //t_patient Contents
        int age = patient.getAge();
        String area = patient.getArea();
        String city = patient.getCity();
        String state = patient.getState();

        PreparedStatement statement = sqlConnection.prepareStatement("update t_user set username=?,email=?,password=? where pk_user_id=? and is_active=?");
        statement.setString(1, username);
        statement.setString(2, email);
        statement.setString(3, password);
        statement.setInt(4, userId);
        statement.setInt(5, 1);
        statement.executeUpdate();
        statement = sqlConnection.prepareStatement("update t_patient set age=?,area=?,city=?,state=? where fk_user_id=? and is_active=?");
        statement.setInt(1, age);
        statement.setString(2, area);
        statement.setString(3, city);
        statement.setString(4, state);
        statement.setInt(5, userId);
        statement.setInt(6, 1);
        statement.executeUpdate();

        LOGGER.info(LOCAL_MESSAGES_BUNDLE.getString(PatientDaoConstants.PATIENT_UPDATE_IN_DB) + patient);

        connection.closeConnection();


        return true;
    }

    /**
     * @param userId
     * @return
     * @throws SQLException
     */
    @Override
    public Boolean delete(int userId) throws SQLException {
        LOGGER.info(LOCAL_MESSAGES_BUNDLE.getString(PatientDaoConstants.ENTERED_PATIENT_DELETE) + " " + userId);

        MysqlConnection connection = new MysqlConnection();

        Connection sqlConnection = connection.getConnection();


        PreparedStatement statement = sqlConnection.prepareStatement("update t_user set is_active =? where pk_user_id=?");
        statement.setInt(1, 0);
        statement.setInt(2, userId);
        statement.executeUpdate();

        statement = sqlConnection.prepareStatement("update t_patient set is_active=? where fk_user_id=?");
        statement.setInt(1, 0);
        statement.setInt(2, userId);
        statement.executeUpdate();


        connection.closeConnection();
        LOGGER.info(LOCAL_MESSAGES_BUNDLE.getString(PatientDaoConstants.PATIENT_DELETE_IN_DB));

        return true;

    }

    /**
     * @param doctorId
     * @return
     * @throws SQLException
     */
    @Override
    public List<Patient> getAllPatientIDMappedUnderADoctor(int doctorId) throws SQLException {
        MysqlConnection connection = new MysqlConnection();

        Connection sqlConnection = connection.getConnection();
        List<Patient> patientList = new ArrayList<>();
        PreparedStatement statement = sqlConnection.prepareStatement("select pk_user_id,username,email,age,area,city,state from t_user join t_patient on t_user.pk_user_id = t_patient.fk_user_id join t_patient_has_doctor on t_patient_has_doctor.fk_patient_id = t_user.pk_user_id  where t_user.is_active =? and t_patient.is_active=? and t_patient_has_doctor.is_active=? and t_patient_has_doctor.fk_doctor_id=?");
        statement.setInt(1, 1);
        statement.setInt(2, 1);
        statement.setInt(3, 1);
        statement.setInt(4, doctorId);


        ResultSet resultSet = statement.executeQuery();
        while (resultSet.next()) {
            Patient patient = new Patient();
            patient.setUserId(resultSet.getInt(1));
            patient.setUsername(resultSet.getString(2));
            patient.setEmail(resultSet.getString(3));
            patient.setAge(resultSet.getInt(4));
            patient.setArea(resultSet.getString(5));
            patient.setCity(resultSet.getString(6));
            patient.setState(resultSet.getString(7));
            patientList.add(patient);
        }
        return patientList;
    }


}
